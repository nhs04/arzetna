<div class="container mt-4">
    <div class="row mb-4">
        <div class="col-md-6">
            <input id="searchInput" type="text" class="form-control" placeholder="Search by product name" onkeyup="searchProducts()">
        </div>
        <div class="col-md-6 text-end">
            <button id="sortButton" class="btn btn-primary" onclick="toggleSort()">Sort by Price</button>
        </div>
    </div>
    <div class="row">
        {{#if products}}
            {{#each products}}
                <div class="col-md-4 mb-4 product-card">
                    <div class="card">
                        <img src="{{ imageLink }}" class="card-img-top" alt="{{ name }}" style="height: 200px; object-fit: cover;">
                        <div class="card-body">
                            <h5 class="card-title">{{ name }}</h5>
                            <p class="card-text">{{ price }} {{ currency }}</p>
                            {{#if isAvailable}}
                                <p class="card-text">Available</p>
                                {{#if ../isAdmin}}
                                <p></p>
                                {{else}}
                                <input id="quantity-{{ productId }}" type="number" class="form-control mb-2" placeholder="Quantity">
                                <button class="btn btn-primary mb-2" onclick="addToCart('{{ productId }}')">Add to Cart</button>
                                <button type="button" class="btn btn-primary mb-2" onclick="openAddReviewModal('{{ productId }}')">Add Review</button>
                                {{/if}}
                            {{else}}
                                <p class="card-text">Out of Stock</p>
                                <button class="btn btn-primary" disabled>Add to Cart</button>
                            {{/if}}
                            <button type="button" class="btn btn-primary" onclick="openViewReviewsModal('{{ productId }}')">View Reviews</button>
                        </div>
                    </div>
                </div>
            {{/each}}
        {{else}}
            <p>No products available.</p>
        {{/if}}
    </div>
</div>

<!-- Add Review Modal -->
<div class="modal fade" id="addReviewModal" tabindex="-1" aria-labelledby="addReviewModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addReviewModalLabel">Add Review</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addReviewForm">
                    <div class="mb-3">
                        <label for="rating">Rating:</label>
                        <input type="number" id="rating" name="rating" min="1" max="5" required>
                    </div>
                    <div class="mb-3">
                        <label for="review">Review:</label>
                        <textarea id="review" name="review" rows="3" required></textarea>
                    </div>
                    <button type="submit" class="btn btn-primary">Add Review</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- View Reviews Modal -->
<div class="modal fade" id="viewReviewsModal" tabindex="-1" aria-labelledby="viewReviewsModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="viewReviewsModalLabel">Product Reviews</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="reviewsList">
                <!-- Reviews will be populated here -->
            </div>
        </div>
    </div>
</div>
    <!-- Add this script tag before your script that uses jQuery functions -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

    <script>
        let sortByPrice = false;

        function openAddReviewModal(productId) {
            const addReviewForm = document.getElementById('addReviewForm');
            addReviewForm.reset(); // Reset form inputs
            $('#addReviewModal').modal('show');
            addReviewForm.onsubmit = (event) => addReview(event, productId);
        }

        function openViewReviewsModal(productId) {
            fetch(`/api/products/${productId}/reviews`)
                .then(response => response.json())
                .then(reviews => {
                    const reviewsList = document.getElementById('reviewsList');
                    reviewsList.innerHTML = '';
                    reviews.forEach(review => {
                        const reviewElement = document.createElement('div');
                        reviewElement.innerHTML = `
                            <h6>Rating: ${review.rating}</h6>
                            <p>${review.review}</p>
                            <p>By: ${review.username}</p>
                        `;
                        reviewsList.appendChild(reviewElement);
                    });
                    $('#viewReviewsModal').modal('show');
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while fetching reviews');
                });
        }

        function searchProducts() {
            var input, filter, cards, cardContainer, title, i;
            input = document.getElementById("searchInput");
            filter = input.value.toUpperCase();
            cardContainer = document.getElementsByClassName("container")[0];
            cards = cardContainer.getElementsByClassName("product-card");
            for (i = 0; i < cards.length; i++) {
                title = cards[i].querySelector(".card-title");
                if (title.innerText.toUpperCase().indexOf(filter) > -1) {
                    cards[i].style.display = "";
                } else {
                    cards[i].style.display = "none";
                }
            }
        }

        function toggleSort() {
            sortByPrice = !sortByPrice;
            const sortButton = document.getElementById("sortButton");
            if (sortByPrice) {
                sortButton.textContent = "Reset Sort";
                sortProductsByPrice();
            } else {
                sortButton.textContent = "Sort by Price";
                window.location.reload();
                //sortProductsByName();
            }
        }

        function sortProductsByPrice() {
            const cardContainer = document.getElementsByClassName("container")[0];
            const cards = Array.from(cardContainer.getElementsByClassName("product-card"));
            cards.sort((a, b) => {
                const priceA = parseFloat(a.querySelector(".card-text").textContent.split(" ")[0]);
                const priceB = parseFloat(b.querySelector(".card-text").textContent.split(" ")[0]);
                return priceA - priceB;
            });
            cards.forEach(card => cardContainer.appendChild(card));
        }

        function sortProductsByName() {
            const cardContainer = document.getElementsByClassName("container")[0];
            const cards = Array.from(cardContainer.getElementsByClassName("product-card"));
            cards.sort((a, b) => {
                const nameA = a.querySelector(".card-title").textContent.toUpperCase();
                const nameB = b.querySelector(".card-title").textContent.toUpperCase();
                if (nameA < nameB) {
                    return -1;
                }
                if (nameA > nameB) {
                    return 1;
                }
                return 0;
            });
            cards.forEach(card => cardContainer.appendChild(card));
        }

        function addToCart(productId) {
    console.log(productId);
    var quantity = document.getElementById('quantity-' + productId).value;
    if (!quantity) {
        alert('Please enter a quantity');
        return;
    }
    if (quantity <= 0) {
        alert('Quantity must be greater than 0');
        return;
    }

    // Check if there's already a product in the cart
    const existingProducts = document.querySelectorAll('.cart-product');
    if (existingProducts.length > 0) {
        alert('You can only add one product to the cart at a time.');
        return;
    }

    fetch('/api/cart/add-product', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            productId: productId,
            quantity: quantity
        })
    }).then(response => {
        if (response.ok) {
            alert('Product added to cart');
        } else {
            alert('Failed to add product to cart');
        }
    }).catch(error => {
        console.error('Error:', error);
    });
}

function addReview(event, productId) {
            event.preventDefault();
            const rating = document.getElementById('rating').value;
            const review = document.getElementById('review').value;
            console.log(productId);
            if (!rating || !review) {
                alert('Please provide rating and review');
                return;
            }
            const reqBody = JSON.stringify({
                productId: productId,
                rating: rating,
                review: review
            });
            fetch('/buyer/addreview', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: reqBody
            }).then(response => {
                if (response.ok) {
                    alert('Review added successfully');
                    // Refresh the page or update UI as needed
                } else {
                    alert('Failed to add review');
                }
            }).catch(error => {
                console.error('Error:', error);
                alert('An error occurred while adding the review');
            });
        }

    </script>
</body>
</html>
